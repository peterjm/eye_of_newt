#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'
module EyeOfNewt
  class Parser < Racc::Parser


  require 'eye_of_newt/ingredient'

  def initialize(tokenizer, ingredient = EyeOfNewt::Ingredient.new)
    @tokenizer = tokenizer
    @ingredient = ingredient
    super()
  end

  def next_token
    @tokenizer.next_token
  end

  def parse
    do_parse
    @ingredient
  end

  def to_unit(u)
    EyeOfNewt::Unit[u]
  end
##### State transition tables begin ###

racc_action_table = [
    10,    10,    11,    18,    24,    25,    19,    18,    26,    21,
    10,    12,    15,    15,    10,    18,    24,    10,    31,    32 ]

racc_action_check = [
     9,     0,     0,     9,    11,    11,     5,     5,    12,     6,
     2,     1,     3,    13,    15,    16,    21,    22,    24,    25 ]

racc_action_pointer = [
    -1,    11,     8,     6,   nil,     2,     6,   nil,   nil,    -2,
   nil,    -3,     8,     7,   nil,    12,    10,   nil,   nil,   nil,
   nil,     9,    15,   nil,    15,    16,   nil,   nil,   nil,   nil,
   nil,   nil,   nil ]

racc_action_default = [
   -24,   -24,   -24,    -4,    -5,    -9,   -10,   -12,   -13,   -17,
   -19,   -21,   -24,    -2,    -3,   -24,    -7,    -8,   -18,   -20,
   -11,   -24,   -24,   -16,   -24,   -24,    33,    -1,   -14,    -6,
   -15,   -22,   -23 ]

racc_goto_table = [
    23,    17,     7,     5,    14,    22,    28,     3,    20,    13,
    16,     1,    29,    30,    27,     6,     2,     8 ]

racc_goto_check = [
     5,     8,    10,     6,     4,     8,     5,     3,    10,     3,
     7,     1,     8,     5,     4,     9,     2,    11 ]

racc_goto_pointer = [
   nil,    11,    16,     7,     1,    -9,     3,     5,    -4,    15,
     2,    17,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,
   nil,   nil,     9 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 10, :_reduce_none,
  2, 10, :_reduce_none,
  2, 10, :_reduce_none,
  1, 10, :_reduce_none,
  1, 12, :_reduce_5,
  3, 11, :_reduce_none,
  2, 11, :_reduce_none,
  2, 11, :_reduce_none,
  1, 11, :_reduce_none,
  1, 15, :_reduce_10,
  2, 15, :_reduce_11,
  1, 15, :_reduce_12,
  1, 15, :_reduce_13,
  2, 13, :_reduce_14,
  3, 14, :_reduce_15,
  2, 14, :_reduce_16,
  1, 14, :_reduce_none,
  1, 17, :_reduce_none,
  1, 21, :_reduce_none,
  1, 16, :_reduce_20,
  1, 18, :_reduce_21,
  3, 19, :_reduce_22,
  3, 20, :_reduce_23 ]

racc_reduce_n = 24

racc_shift_n = 33

racc_token_table = {
  false => 0,
  :error => 1,
  :WORD => 2,
  :NUMBER => 3,
  :UNIT => 4,
  :OF => 5,
  "," => 6,
  "/" => 7,
  "." => 8 }

racc_nt_base = 9

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "WORD",
  "NUMBER",
  "UNIT",
  "OF",
  "\",\"",
  "\"/\"",
  "\".\"",
  "$start",
  "ingredient",
  "quantity",
  "ingredient_name",
  "style",
  "words",
  "amount",
  "unit",
  "of",
  "number",
  "fraction",
  "decimal",
  "word" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

def _reduce_5(val, _values, result)
 @ingredient.name = result 
    result
end

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

def _reduce_10(val, _values, result)
 @ingredient.quantity = result 
    result
end

def _reduce_11(val, _values, result)
 @ingredient.quantity = val[0] + val[1] 
    result
end

def _reduce_12(val, _values, result)
 @ingredient.quantity = result 
    result
end

def _reduce_13(val, _values, result)
 @ingredient.quantity = result 
    result
end

def _reduce_14(val, _values, result)
 @ingredient.style = val[1] 
    result
end

def _reduce_15(val, _values, result)
 result = val.join(' ') 
    result
end

def _reduce_16(val, _values, result)
 result = val.join(' ') 
    result
end

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

def _reduce_20(val, _values, result)
 @ingredient.unit = to_unit(result) 
    result
end

def _reduce_21(val, _values, result)
 result = val[0].to_i 
    result
end

def _reduce_22(val, _values, result)
 result = val[0].to_f / val[2].to_f 
    result
end

def _reduce_23(val, _values, result)
 result = val.join.to_f 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module EyeOfNewt
